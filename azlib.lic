require 'drb/drb'
hide_me

DRb.start_service
$AZ_REMOTE = DRbObject.new_with_uri('druby://localhost:9999')

$AZ_CHARS = %w[Azanoth Aranthius Idios Gossan Helsfeld]
$AZ_CHARS_REGEX = /#{$AZ_CHARS.join('|')}/
$AZ_CHARS_SET = $AZ_CHARS.collect { |char| [char, true] }.to_h

$AZ_TAG_SELLS_GEMS = 'sells_gems'
$AZ_TAG_GIVES_ARMOR_SUPPORT = 'gives_armor_support'
$AZ_TAG_RECEIVES_ARMOR_SUPPORT = 'receives_armor_support'
$AZ_TAG_WAGGLES_OTHERS = 'waggles_others'
$AZ_TAG_RESTING_GROUP_LEADER = 'resting_group_leader'
$AZ_TAG_LOW_BOUNTY_PRIORITY = 'low_bounty_priority'
$AZ_TAG_RUBS_WEAK_BROOCH = 'rubs_weak_brooch'
$AZ_TAG_CASTS_SHORT_BUFFS = 'casts_short_buffs'
$AZ_CHAR_TAGS =
  Hash[*$AZ_CHARS.collect { |x| [x, Set.new] }.flatten].merge(
    {
      'Azanoth' => Set.new([$AZ_TAG_GIVES_ARMOR_SUPPORT]),
      'Idios' => Set.new([$AZ_TAG_RUBS_WEAK_BROOCH]),
      'Aranthius' =>
        Set.new(
          [
            $AZ_TAG_RUBS_WEAK_BROOCH,
            $AZ_TAG_RECEIVES_ARMOR_SUPPORT,
            $AZ_TAG_WAGGLES_OTHERS,
            $AZ_TAG_SELLS_GEMS
          ]
        ),
      'Gossan' =>
        Set.new(
          [
            $AZ_TAG_RUBS_WEAK_BROOCH,
            $AZ_TAG_LOW_BOUNTY_PRIORITY,
            $AZ_TAG_RESTING_GROUP_LEADER,
            $AZ_TAG_CASTS_SHORT_BUFFS
          ]
        ),
      'Helsfeld' => Set.new([$AZ_TAG_LOW_BOUNTY_PRIORITY])
    }
  )
$AZ_HAS_TAG =
  Proc.new { |tag, char = Char.name| $AZ_CHAR_TAGS[char].include? tag }

$AZ_PERSONAL_SCRIPTS =
  Hash[*$AZ_CHARS.collect { |x| [x, Proc.new {}] }.flatten].merge(
    {
      'Azanoth' =>
        Proc.new do
          if !Spell[9605].active? && !Spell[9606].active? && checkstamina >= 30
            fput 'cman surge'
          end
          fput 'cman dervish'
          waitrt?
          fput 'war shout'
          waitrt?
          Script.start 'Azanoth-506'
        end
    }
  )

$AZ_BANDIT_TARGET_SET = {}
'rogue marauder thief mugger bandit brigand robber outlaw thug highwayman'
  .split(' ')
  .each { |noun| $AZ_BANDIT_TARGET_SET[noun] = true }
$AZ_BOUNTY_PATTERN_NUM = /^You have been tasked to (?:help \w+ )?suppress bandit activity (?:in|on|near|between|under) (?:the )?.*\s(?:near|between|under|\.).* (\d+) (?:more )?of them/
$AZ_BOUNTY_PATTERN_FINISHED = /^You (have )?succeeded/

$AZ_SEND_ACTION_SYNC =
  lambda do |char, cmd, arg = ''|
    echo "Queueing action - #{char} #{cmd} #{arg}"
    ACTIONS = $AZ_REMOTE['actions']
    id = ACTIONS.queue_action char, cmd, arg
    loop do
      sleep 0.25
      action = ACTIONS.get_action char, id
      throw 'Failed to get expected action' if !action
      if action['done']
        ACTIONS.clear_action char, id
        throw "ACTION HAS ERROR: #{action['error']}" if action['error']
        return
      end
    end
  end

$AZ_BANDIT_ATTACK =
  Proc.new do |attack_routine|
    # wait for bounty
    loop do
      break if bounty? =~ $AZ_BOUNTY_PATTERN_NUM || bounty? =~ $AZ_BOUNTY_PATTERN_FINISHED
      sleep 1
    end

    # send count to remote
    if bounty? =~ $AZ_BOUNTY_PATTERN_FINISHED
      # this should only happen if we killed char-bandits.lic and restarted it
      # mid-run, causing us to skip an update.
      $AZ_REMOTE['bandits'].set_count(Char.name, 0)
    elsif bounty? =~ $AZ_BOUNTY_PATTERN_NUM && $1.to_i
      $AZ_REMOTE['bandits'].set_count(Char.name, $1.to_i)
      echo "Set count #{$1}"
    else
      throw 'Failed to find bounty count'
    end

    # wait for group registration
    loop do
      break if $AZ_REMOTE['bandits'].has_group_registered?
      sleep 1
    end

    # state
    poaching = false
    carried_line = nil
    last_bounty_text = ''
    original_other_bounty_counts = $AZ_REMOTE['bandits'].get_counts
    i_am_lower_priority = $AZ_HAS_TAG.call $AZ_TAG_LOW_BOUNTY_PRIORITY

    # main loop
    i = -1
    while true
      i = i + 1
      fput 'stand' if !standing?

      # identify targets
      targets =
        GameObj.npcs.select do |npc|
          $AZ_BANDIT_TARGET_SET[npc.noun] && npc.status != 'dead' &&
            !npc.name.start_with?('animated ')
        end

      # check to see if we've moved, and whether we've progressed on bandits
      # we carry over the last line of the buffer to account for the situation
      # where we slurp a line that is important to our next loop iteration
      buffer = carried_line ? [carried_line] : []
      while line = get?
        buffer.push(line)
        carried_line = line
      end
      if carried_line &&
           (
             carried_line.start_with?('Obvious paths:') ||
               carried_line.start_with?('Obvious exits:')
           )
        # we don't want to consider this line in the next loop
        carried_line = nil
      end

      for i in 1..buffer.length
        line = buffer[buffer.length - i]

        # NEXT STEPS:
        # examine poaching_solution.lic and figure out exactly what else we need to
        # read from the buffer to build a complete picture of the scene, probably
        # with status_tags.
        # Hopefully reuse this logic in a function in azbandit

        if line.start_with?('Obvious paths:') ||
             line.start_with?('Obvious exits:')
          # previous line should be "Also here:" (unless we're leading)
          line = buffer[buffer.length - i - 1]
          if line && line.start_with?('Also here: ') &&
               line =~ /^Also here: (.*)/
            # Check to see if we'd be poaching
            pcs =
              $1
                .split(', ')
                .collect do |x|
                  x.sub(/ who is .*/, '').split(' ')[-1] # remove status suffix and prename title
                end
            poaching = pcs.any? { |x| !$AZ_CHARS_SET[x] }
          elsif line && !group?
            # I must be leading and not poaching
            poaching = false
          else
            # Er... there should be SOME line, like a room description
            echo 'WTF'
            echo "#{buffer.length} - #{i} - 1"
            echo buffer
            echo '-----------'
            poaching = true
          end
          break
        end
      end

      # defer to others?
      bounty_counts = $AZ_REMOTE['bandits'].get_counts
      lower_priority = $AZ_HAS_TAG.call $AZ_TAG_LOW_BOUNTY_PRIORITY
      other_bounty_counts =
        bounty_counts.reject do |k, v|
          k === Char.name || $AZ_HAS_TAG.call($AZ_TAG_LOW_BOUNTY_PRIORITY, k)
        end

      defer = true
      if i_am_lower_priority
        # wait until I am last and all high-priority chars have tagged
        i_am_last =
          bounty_counts[Char.name] >= (other_bounty_counts.values.max || 100)
        all_chars_tagged =
          other_bounty_counts.all? do |k, v|
            v < original_other_bounty_counts[k]
          end
        defer = false if i_am_last && all_chars_tagged
      else
        # defer if I have less than any untagged high-priority character
        # TODO is there some way we can let Gossan get a shot here?
        defer =
          other_bounty_counts.any? do |k, v|
            bounty_counts[Char.name] < v && v == original_other_bounty_counts[k]
          end
      end
      echo "---- DEFER: #{defer}"

      # chill or attack
      if defer || poaching || targets.nil? || targets.length == 0
        if checkcastrt == 0
          fput 'stance def' if checkstance != 'defensive'
        elsif checkstance != 'guarded'
          fput 'stance def'
        end
      else
        attack_routine.call(targets)
      end

      # yield
      rt = checkrt
      if rt > 2
        sleep(rt - 1)
      else
        sleep 0.25
      end

      # update bounty count
      bounty_text = bounty?
      if last_bounty_text != bounty_text
        new_count = 100
        if bounty_text =~ $AZ_BOUNTY_PATTERN_FINISHED
          new_count = 0
        elsif bounty_text =~ $AZ_BOUNTY_PATTERN_NUM
          new_count = $1.to_i
        end
        $AZ_REMOTE['bandits'].set_count(Char.name, new_count)
        last_bounty_text = bounty_text
      end
    end
  end

$AZ_RUN_CMD =
  lambda do |cmd, arg|
    echo "run_cmd(#{cmd}, #{arg})"
    bounty_re = /^You have been tasked to (?:help \w+ )?suppress bandit activity (?:in|on|near|between|under) (?:the )?(.*)\s(?:near|between|under|\.)/
    if cmd == 'exchange-unless' && arg.length > 0
      if bounty? =~ bounty_re
        if $1 == arg
          echo 'ALREADY HAVE REQUESTED LOCATION'

          # also prep for bandits
          Script.start 'prep'
          return true
        end
      end
      wait_while { Spell[9056].active? }
      fput 'ask luc to remove'
      fput 'ask luc to remove'

      # also prep for bandits
      Script.start 'prep'
      return true
    elsif cmd == 'start-script' && arg.length > 0
      Script.start(arg) if !running? arg
      return true
    elsif cmd == 'stop-script' && arg.length > 0
      Script.kill(arg) if running? arg
      return true
    elsif cmd == 'wait_groupbounty_cooldown_unless' && arg.length > 0
      has_that_bounty = bounty? =~ bounty_re && $1 == arg
      if Spell[9056].active? && !has_that_bounty
        msg =
          "Group bounty in #{Spell[9056].timeleft.round(2)} minutes (ie #{(Spell[9056].timeleft * 60).round(0)} seconds)"
        fput "whisper ooc Aranthius #{msg}"
      end
      wait_while { Spell[9056].active? } unless has_that_bounty
      return true
    elsif cmd == 'ungroup'
      Script.running.each { |x| x.kill }
      fput 'disband'
      fput 'leave'
      fput 'group open'
      return true
    end
    echo 'SWITCH FALL THROUGH'
    return false
  end

loop do
  ACTIONS = $AZ_REMOTE['actions']
  actions = (ACTIONS.get_actions(Char.name) || []).reject { |x| x['done'] }
  actions.each do |action|
    success = $AZ_RUN_CMD.call(action['cmd'], action['args'])
    ACTIONS.mark_action_done(
      Char.name,
      action['id'],
      success ? nil : 'FAILED RUN_CMD'
    )
  end
  sleep 1
end
