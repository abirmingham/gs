if bounty? !~ AzLib::Bandits::BOUNTY_PATTERN_FINISHED &&
     !AzConfig.has_tag?(:LOW_BOUNTY_PRIORITY)
  raise "You aren't ready to finish"
end

taskfinish = [420, 1957, 28_978]
taskfinish_match = /sentry|guard|sergeant/
rest = [29_623] # hoa
# rest = [1844, 28813, 29260]

def join_resting_group_leader()
  leader =
    AzConfig::CHARS.find { |x| AzConfig.has_tag? :RESTING_GROUP_LEADER, x }
  return if Char.name == leader
  sleep 5 unless GameObj.pcs.any? { |pc| pc.noun == leader }
  wait_until { GameObj.pcs.any? { |pc| pc.noun == leader } }
  loop do
    result =
      dothistimeout "join #{leader}", 2, /You join|You are already a member/
    break if result
  end
end

Script.running.each { |x| x.kill unless x == Script.current }
waitrt?
fput 'stance def' if stance != 'defensive'

if !rest.include? Room.current.id
  # If I'm not at rest, trigger fbandit on others
  # (if I am at rest, they probably already did it and
  #  this is being triggered manually)
  # note that this creates a cartesion thing but it doesn't
  # matter
  AzConfig::CHARS.each do |char|
    if Char.name != char && [
         *GameObj.pcs,
         *AzLib::RoomInfo.followers
       ].any? { |pc| pc.noun == char }
      AzLib::Remote::RAW['actions'].queue_action char, 'start-script', 'fbandit'
    end
  end
  fput 'disband'
  put 'group open'
end

if bounty? =~ /^You (have )?succeeded/
  target_room = Room.current.find_nearest(taskfinish)
  until Room.current.id == target_room
    Script.run('go2', target_room.to_s + ' --disable-confirm')
  end
  npc = GameObj.npcs.find { |npc| npc.name =~ taskfinish_match }
  raise 'Failed to find npc' if npc.nil?
  fput "ask ##{npc.id} about bounty"
end

rest_room = Room.current.find_nearest(rest)
Script.run('go2', rest_room.to_s + ' --disable-confirm')
if checkmind == 'saturated'
  join_resting_group_leader
  echo 'Mind is saturated - waiting before turning in bounty'

  Script.run('waggle')
  while checkmind == 'saturated'
    fput 'exp' if Time.now.to_f.round(0) % 60 == 0
    sleep 0.75
  end
  wait_while { checkmind == 'saturated' }
end

def get_exp()
  put 'exp'
  while line = get
    return $1.gsub(',', '').to_i if line =~ /Total Exp: ([\d,]*)/
  end
end

if bounty? =~ /^You (have )?succeeded/
  loop {
    result = dothistimeout 'leave', 2, /You leave|But you are not in/
    break if result
  }
  put 'group open'
  Script.run('go2', 'advguild')
  npc = GameObj.npcs.find { |npc| npc.name =~ /Guild Taskmaster/ }
  raise 'Failed to find npc' if npc.nil?
  put 'experience'
  before_exp = get_exp
  dothistimeout "ask ##{npc.id} about bounty", 5, /You have earned/
  after_exp = get_exp
  echo [before_exp, after_exp]
  echo "Experience gained: #{after_exp - before_exp}"
end

# bank
Script.run 'go2', 'bank --disable-confirm'
fput 'deposit all'
fput 'check balance'

# go to rest area
Script.run('go2', rest_room.to_s + ' --disable-confirm')

# support
Script.run('waggle')

if AzConfig.has_tag? :WAGGLES_OTHERS
  AzConfig::CHARS.each { |x| Script.run 'waggle', x if checkpcs.include? x }
  Spell[911].cast if Char.prof == 'Wizard' && Spell[911].affordable?
end

join_resting_group_leader if Spell[9003].active?
if AzConfig.has_tag? :LOW_BOUNTY_PRIORITY
  # always turn in - need to reset count so that spawns
  # keep coming and so that she has a chance to ever finish
  # (which won't happen if their number is low)
  Script.run('azswapbounty')
end

until Room.current.id == rest_room
  Script.run('go2', rest_room.to_s + ' --disable-confirm')
end

Script.run('getbounty')

join_resting_group_leader

AzConfig::POST_HUNT[Char.name].call
until Room.current.id == rest_room
  Script.run('go2', rest_room.to_s + ' --disable-confirm')
end

join_resting_group_leader

do_client ';magic'
