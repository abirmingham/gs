if bounty? !~ $AZ_BOUNTY_PATTERN_FINISHED &&
     !$AZ_HAS_TAG.call($AZ_TAG_LOW_BOUNTY_PRIORITY)
  raise "You aren't ready to finish"
end

taskfinish = [420, 1957, 28_978]
taskfinish_match = /sentry|guard|sergeant/
rest = [1844, 28_813, 29_260]

def turn_off_enh()
  result = ''
  loop do
    result =
      dothistimeout 'inv enh off',
                    2,
                    /You already are not accepting|You are no longer accepting the benefits/
    return if result
  end
end

def join_resting_group_leader()
  leader =
    $AZ_CHARS.find { |x| $AZ_HAS_TAG.call $AZ_TAG_RESTING_GROUP_LEADER, x }
  return if Char.name == leader
  sleep 5 unless GameObj.pcs.any? { |pc| pc.noun == leader }
  wait_until { GameObj.pcs.any? { |pc| pc.noun == leader } }
  fput "join #{leader}"
end

Script.running.each { |x| x.kill unless x == Script.current }
waitrt?
fput 'stance def' if stance != 'defensive'

if !rest.include? Room.current.id
  if !group?
    # If I'm not at rest, trigger fbandit on followers
    # (if I am at rest, they probably already did it and
    #  this is being triggered manually)
    $AZ_CHARS.each do |char|
      if Char.name != char && GameObj.pcs.any? { |pc| pc.noun == char }
        ACTIONS.queue_action char, 'start-script', 'fbandit'
      end
    end
  end
  fput 'disband'
  put 'group open'
end

if bounty? =~ /^You (have )?succeeded/
  target_room = Room.current.find_nearest(taskfinish)
  until Room.current.id == target_room
    Script.run('go2', target_room.to_s + ' --disable-confirm')
  end
  npc = GameObj.npcs.find { |npc| npc.name =~ taskfinish_match }
  raise 'Failed to find npc' if npc.nil?
  fput "ask ##{npc.id} about bounty"
end

rest_room = Room.current.find_nearest(rest)
Script.run('go2', rest_room.to_s + ' --disable-confirm')
if checkmind == 'saturated'
  join_resting_group_leader
  echo 'Mind is saturated - waiting before turning in bounty'

  Script.run('waggle')
  while checkmind == 'saturated'
    fput 'exp' if Time.now.to_f.round(0) % 60 == 0
    sleep 0.75
  end
  wait_while { checkmind == 'saturated' }
end

def get_exp()
  put 'exp'
  while line = get
    return $1.gsub(',', '').to_i if line =~ /Total Exp: ([\d,]*)/
  end
end

if bounty? =~ /^You (have )?succeeded/
  fput 'leave'
  put 'group open'
  Script.run('go2', 'advguild')
  npc = GameObj.npcs.find { |npc| npc.name =~ /Guild Taskmaster/ }
  raise 'Failed to find npc' if npc.nil?
  put 'experience'
  before_exp = get_exp
  dothistimeout "ask ##{npc.id} about bounty", 5, /You have earned/
  after_exp = get_exp
  echo [before_exp, after_exp]
  echo "Experience gained: #{after_exp - before_exp}"
end

if $AZ_HAS_TAG.call $AZ_TAG_SELLS_GEMS
  fput 'store all'
  fput 'stow all'
  Script.run('go2', 'gemshop')
  fput "rem #{Vars.lootsack}"
  fput "sell #{Vars.lootsack}"
  fput "wear #{Vars.lootsack}"
end

# bank
Script.run 'go2', 'bank --disable-confirm'
fput 'deposit all'
fput 'check balance'

# go to rest area
Script.run('go2', rest_room.to_s + ' --disable-confirm')

# support
Script.run('waggle')

if $AZ_HAS_TAG.call $AZ_TAG_GIVES_ARMOR_SUPPORT
  fput 'armor support'
  $AZ_CHARS.each do |x|
    if $AZ_HAS_TAG.call $AZ_TAG_RECEIVES_ARMOR_SUPPORT, x
      fput "armor support #{x}" if checkpcs.include? x
    end
  end
end

if $AZ_HAS_TAG.call $AZ_TAG_WAGGLES_OTHERS
  $AZ_CHARS.each { |x| Script.run 'waggle', x if checkpcs.include? x }
  Spell[911].cast if Char.prof == 'wizard' && Spell[911].affordable?
end

join_resting_group_leader if Spell[9003].active?
if $AZ_HAS_TAG.call $AZ_TAG_LOW_BOUNTY_PRIORITY
  # always turn in - need to reset count so that spawns
  # keep coming and so that she has a chance to ever finish
  # (which won't happen if their number is low)
  Script.run('azswapbounty')
end

until Room.current.id == rest_room
  Script.run('go2', rest_room.to_s + ' --disable-confirm')
end

Script.run('getbounty')
until Room.current.id == rest_room
  Script.run('go2', rest_room.to_s + ' --disable-confirm')
end

if Char.prof == 'Paladin'
  fput "gird"
  if GameObj.right_hand.noun.nil?
    echo "Failed to find weapon to beseech"
  else
    fput "prep 1615"
    fput "infuse my #{GameObj.right_hand.noun}"
    fput "beseech #{GameObj.right_hand.noun} ignite"
  end
end

join_resting_group_leader
do_client ';magic'
