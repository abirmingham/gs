args = script.vars[1..-1]
GROUP =
  if args.length > 0
    [Char.name, *args.collect { |name| name.capitalize }].uniq
  else
    %w[Azanoth Idios Aranthius Gossan Helsfeld]
  end

echo "GROUP: #{GROUP}"

# clean up previous state
Script.running.each { |x| x.kill unless x == Script.current }
$AZ_REMOTE['actions'].clear_all_actions

throw 'No bounty' unless bounty?

if bounty? !~ /^You have been tasked/
  echo 'Waiting for bounty'
  wait_while do
    bounty? !~ /^You have been tasked/ || running?('fbandit') ||
      running?('go2') || running?('getbounty')
  end
  sleep 5
end

# Identify bounty location
bounty_re = /^You have been tasked to (?:help \w+ )?suppress bandit activity (?:in|on|near|between|under) (?:the )?(.*)\s(?:near|between|under|\.)/
bounty_location = nil
bounty_location = $1 if bounty? =~ bounty_re
throw 'Failed to find bounty location' unless bounty_location

# Wait for share-ready
GROUP.each do |char|
  if Char.name != char
    $AZ_SEND_ACTION_SYNC.call char,
                              'wait_groupbounty_cooldown_unless',
                              bounty_location
  end
end

# Form group
multifput 'disband', 'leave'
GROUP.each { |char| fput "hold #{char}" if Char.name != char }

# Set new group (clears previous counts)
$AZ_REMOTE['bandits'].set_new_group GROUP

# Share bounty
Script.run('go2', 'advguild')

GROUP.each do |char|
  if Char.name != char
    # exchange and start prep.lic
    $AZ_SEND_ACTION_SYNC.call char, 'exchange-unless', bounty_location
    fput "ask luc to add #{char}"
  end
end

# Go!
Script.start('prep')
# sleep 3 # wait for warcry # TODO move to bandit start thing

loop do
  # wait until everyone else has registered bounty count
  break if $AZ_REMOTE['bandits'].has_group_registered?
  sleep 1
end

waitrt?
Script.start('azbandit')
