target_set = {}
script.vars.slice(1, script.vars.length).each { |noun| target_set[noun] = true }

module Ewave
  @DOWNSTREAM_HOOK_NAME = 'ewave_downstream_hook'
  @grouplist = []

  def self.populate_group()
    @grouplist.clear

    checkgroupline =
      proc do |line|
        line =~
          %r{exist="\-[0-9]+" noun=".*">(.*)<\/a> is (?:following you|the leader of your group|also a member of your group)}i
        if !$1.nil?
          @grouplist.push($1)
          @groupset[$1] = true
        end
      end

    action =
      proc do |server_string|
        if checkgroupline.call(server_string) or
             server_string =~
               /group status is currently|to set your group status|^.$|You are not currently in a group/m
          nil
        else
          server_string
        end
      end
    DownstreamHook.add(@DOWNSTREAM_HOOK_NAME, action)
    $_SERVER_.puts 'group'
    waitfor 'group status is currently',
            'to set your group status',
            'You are not currently in a group'
    pause 0.5
    DownstreamHook.remove(@DOWNSTREAM_HOOK_NAME)
  end

  def self.main(target_set)
    populate_group
    before_dying { DownstreamHook.remove(@DOWNSTREAM_HOOK_NAME) }
    echo @grouplist

    echo 'Starting ewave'
    last_room = Room.current.id

    while true
      populate_group if last_room != Room.current.id
      last_room = Room.current.id

      need_wave =
        ((checkpcs - @grouplist).count == 0) && GameObj.npcs.any? do |npc|
          target_set[npc.noun] && !npc.status &&
            !npc.name.start_with?('animated ')
        end
      if need_wave
        Spell[410].cast
        GameObj.pcs.each do |s|
          fput "pull #{s.noun}" if s.status =~ /lying|prone/
        end
      end

      sleep 0.25
    end
  end
end

Ewave.main(target_set)
