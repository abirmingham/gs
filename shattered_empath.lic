# Shattered Empath
# A script for cold, calculating afk empaths
# Author: Monotonous
# v1.1
# 06/20/2010
# CONFIGURATION	:	Use "setup" parameter at command line
# WARNING	:	This is not designed with sub-level 14 empaths in mind. Newbs will heal to death.

hide_me
silence_me
fput 'set description off'

DownstreamHook.add(
  "#{script.name}_squelch",
  proc do |str|
    match =
      [
        /^You take a quick appraisal /,
        /^Scents of brine and seaweed travel/,
        /^Stars overhead twinkle in the night/,
        /^A black cat pads by/,
        /just arrived\./,
        /Lord.*just went/,
        /^You focus on/,
        /wound gradually fades, forming on your/
      ].find { |x| str =~ x }
    match ? nil : str
  end
)

before_dying { DownstreamHook.remove("#{script.name}_squelch") }

def TransferFrom(person, cureBlood, stopWhenFried)
  waitrt?
  waitcastrt?
  fput "appraise #{person}"
  line = matchtimeout 2, 'You take a quick appraisal of '
  return if line !~ /You take a quick appraisal of/
  wounds = []
  wounds.push 'head' if line =~ /head/
  wounds.push 'neck' if line =~ /neck/
  wounds.push 'right eye' if line =~ /right eye/
  wounds.push 'left eye' if line =~ /left eye/
  wounds.push 'back' if line =~ /back/
  wounds.push 'chest' if line =~ /chest/
  wounds.push 'abdomen' if line =~ /abdomen|abdominal/
  wounds.push 'left arm' if line =~ /left arm/
  wounds.push 'right arm' if line =~ /right arm/
  wounds.push 'left hand' if line =~ /left hand/
  wounds.push 'right hand' if line =~ /right hand/
  wounds.push 'left leg' if line =~ /left leg/
  wounds.push 'right leg' if line =~ /right leg/
  wounds.push 'nerves' if line =~ /twitching|convulsions/
  wounds = [] if line =~ /no apparent injuries/

  wounds.each do |wound|
    break if stopWhenFried and checkfried
    put "transfer #{person} #{wound}"
    CheckHealth()
  end

  if cureBlood and wounds.length > 0
    line = "You take some of somebody's blood loss."
    while percenthealth > 50 and line =~ /some of .+ blood loss/
      break if stopWhenFried and checkfried
      fput "transfer #{person}"
      line = matchtimeout 1, 'You take', 'Nothing happens.'
      CheckHealth()
    end
  end
end

def Cure(cureLocation, cureMana)
  CheckHealth()

  while checkmana < cureMana
    CheckHealth()
    pause 5
  end

  waitrt?
  waitcastrt?
  fput "cure #{cureLocation}"
  pause 3
end

def CheckHealth
  while percenthealth < 100
    wait_while { checkmana < 1 }
    waitrt?
    waitcastrt?
    fput 'cure blood'
    pause 3
  end
end

def CheckWoundsOfLevel(level, manaModifier)
  Cure('head', 4 + manaModifier) if Wounds.head == level
  Cure('neck', 4 + manaModifier) if Wounds.neck == level
  Cure('chest', 5 + manaModifier) if Wounds.chest == level
  Cure('abdomen', 5 + manaModifier) if Wounds.abdomen == level
  Cure('left arm', 2 + manaModifier) if Wounds.leftArm == level
  Cure('right arm', 2 + manaModifier) if Wounds.rightArm == level
  Cure('left leg', 2 + manaModifier) if Wounds.leftLeg == level
  Cure('right leg', 2 + manaModifier) if Wounds.rightLeg == level
  Cure('back', 5 + manaModifier) if Wounds.back == level
  Cure('left hand', 2 + manaModifier) if Wounds.leftHand == level
  Cure('right hand', 2 + manaModifier) if Wounds.rightHand == level
  Cure('nerves', 3 + manaModifier) if Wounds.nerves == level
  Cure('left eye', 5 + manaModifier) if Wounds.leftEye == level
  Cure('right eye', 5 + manaModifier) if Wounds.rightEye == level
end

def CheckScarsOfLevel(level, manaModifier)
  Cure('head', 13 + manaModifier) if Scars.head == level
  Cure('nerves', 12 + manaModifier) if Scars.nerves == level
  Cure('neck', 13 + manaModifier) if Scars.neck == level
  Cure('chest', 14 + manaModifier) if Scars.chest == level
  Cure('abdomen', 14 + manaModifier) if Scars.abdomen == level
  Cure('left arm', 11 + manaModifier) if Scars.leftArm == level
  Cure('right arm', 11 + manaModifier) if Scars.rightArm == level
  Cure('left leg', 11 + manaModifier) if Scars.leftLeg == level
  Cure('right leg', 11 + manaModifier) if Scars.rightLeg == level
  Cure('back', 14 + manaModifier) if Scars.back == level
  Cure('left hand', 11 + manaModifier) if Scars.leftHand == level
  Cure('right hand', 11 + manaModifier) if Scars.rightHand == level
  Cure('left eye', 14 + manaModifier) if Scars.leftEye == level
  Cure('right eye', 14 + manaModifier) if Scars.rightEye == level
end

def CheckHeadAndNerves
  # This method forces head and nerves to be healed down, as xp absorption can be harmed
  Cure('head', 4 + Wounds.head * 5) while Wounds.head > 0
  Cure('nerves', 3 + Wounds.nerves * 5) while Wounds.nerves > 0
  Cure('head', 13 + Scars.head * 4) while Scars.head > 1
  Cure('nerves', 12 + Scars.nerves * 4) while Scars.nerves > 1
end

def DoHealdown(wounds_1, wounds_2, wounds_3, scars_1, scars_2, scars_3)
  CheckHealth()
  CheckWoundsOfLevel(3, 5) if wounds_3
  CheckWoundsOfLevel(2, 5) if wounds_2
  CheckWoundsOfLevel(1, 0) if wounds_1
  CheckScarsOfLevel(3, 4) if scars_3
  CheckScarsOfLevel(2, 4) if scars_2
  CheckScarsOfLevel(1, 0) if scars_1
end

############################################################################################################
############################################################################################################
############################################################################################################

Settings.load
Settings[Char.name] ||= Hash.new
shatteredMode = Settings[Char.name]['shatteredMode']
cureBlood = Settings[Char.name]['cureBlood']
wounds_1 = Settings[Char.name]['wounds_1']
wounds_2 = Settings[Char.name]['wounds_2']
wounds_3 = Settings[Char.name]['wounds_3']
scars_1 = Settings[Char.name]['scars_1']
scars_2 = Settings[Char.name]['scars_2']
scars_3 = Settings[Char.name]['scars_3']
headAndNerves = Settings[Char.name]['headAndNerves']
stopWhenFried = Settings[Char.name]['stopWhenFried']
friendsList = Settings[Char.name]['friendsList'] || ''
doNotHeal = Settings[Char.name]['doNotHeal'] || ''
scanTimer = Settings[Char.name]['scanTimer'] || 10
scanTriggers =
  Settings[Char.name]['scanTriggers'] ||
    'just,appears,arrive,dragging,help,heal,empath,bleed,blood,wound,hurt,die,minor'

if script.vars[1] =~ /^setup$|^options$/i
  window = window_action = nil
  Gtk.queue do
    button = Gtk::Button.new('Save')

    shatteredModeCheck =
      Gtk::CheckButton.new('Shattered Mode - Will heal everyone!')
    shatteredModeCheck.active = shatteredMode

    wound1Check = Gtk::CheckButton.new('1')
    wound2Check = Gtk::CheckButton.new('2')
    wound3Check = Gtk::CheckButton.new('3')
    scar1Check = Gtk::CheckButton.new('1')
    scar2Check = Gtk::CheckButton.new('2')
    scar3Check = Gtk::CheckButton.new('3')

    wound1Check.active = wounds_1
    wound2Check.active = wounds_2
    wound3Check.active = wounds_3
    scar1Check.active = scars_1
    scar2Check.active = scars_2
    scar3Check.active = scars_3

    woundBox = Gtk::HBox.new(true, 0)
    woundBox.pack_start(wound1Check, false, false, 0)
    woundBox.pack_start(wound2Check, false, false, 0)
    woundBox.pack_start(wound3Check, false, false, 0)

    scarBox = Gtk::HBox.new(true, 0)
    scarBox.pack_start(scar1Check, false, false, 0)
    scarBox.pack_start(scar2Check, false, false, 0)
    scarBox.pack_start(scar3Check, false, false, 0)

    noHealTextBox = Gtk::Entry.new
    noHealTextBox.text = doNotHeal

    scanTimerTextBox = Gtk::Entry.new
    scanTimerTextBox.text = scanTimer.to_s

    scanTriggersTextBox = Gtk::Entry.new
    scanTriggersTextBox.text = scanTriggers

    friendsListTextBox = Gtk::Entry.new
    friendsListTextBox.text = friendsList

    cureBloodCheck = Gtk::CheckButton.new("Heal patient's blood loss")
    cureBloodCheck.active = cureBlood

    headAndNervesCheck =
      Gtk::CheckButton.new('Always heal down head and nerves to 1')
    headAndNervesCheck.active = headAndNerves

    stopWhenFriedCheck =
      Gtk::CheckButton.new('Stop healing others once mind is full')
    stopWhenFriedCheck.active = stopWhenFried

    saveButton = Gtk::Button.new('Save')

    main_box = Gtk::VBox.new(false, 0)
    main_box.add(Gtk::HSeparator.new)
    main_box.add(Gtk::Label.new('Wound levels that will be cured down'))
    main_box.add(woundBox)
    main_box.add(Gtk::HSeparator.new)
    main_box.add(Gtk::Label.new('Scar levels that will be cured down'))
    main_box.add(scarBox)
    main_box.add(Gtk::HSeparator.new)
    main_box.add(Gtk::Label.new('Do Not Heal List'))
    main_box.add(Gtk::Label.new('[Name1],[Name2],etc'))
    main_box.add(noHealTextBox)
    main_box.add(Gtk::HSeparator.new)
    main_box.add(Gtk::Label.new('Friends List'))
    main_box.add(Gtk::Label.new('[Name1],[Name2],etc'))
    main_box.add(friendsListTextBox)
    main_box.add(Gtk::HSeparator.new)
    main_box.add(Gtk::Label.new('Time Between Room Scans (Seconds)'))
    main_box.add(scanTimerTextBox)
    main_box.add(Gtk::Label.new('Room Scan Triggers (Forces a room scan)'))
    main_box.add(scanTriggersTextBox)
    main_box.add(Gtk::HSeparator.new)
    main_box.add(shatteredModeCheck)
    main_box.add(stopWhenFriedCheck)
    main_box.add(cureBloodCheck)
    main_box.add(headAndNervesCheck)
    main_box.add(saveButton)

    window = Gtk::Window.new
    window.title = 'Shattered Empath Setup'
    window.border_width = 5
    window.add(main_box)

    saveButton.signal_connect('clicked') do
      Gtk.queue do
        shatteredMode = shatteredModeCheck.active?
        cureBlood = cureBloodCheck.active?
        headAndNerves = headAndNervesCheck.active?
        stopWhenFried = stopWhenFriedCheck.active?
        wounds_1 = wound1Check.active?
        wounds_2 = wound2Check.active?
        wounds_3 = wound3Check.active?
        scars_1 = scar1Check.active?
        scars_2 = scar2Check.active?
        scars_3 = scar3Check.active?
        scanTimer = Integer(scanTimerTextBox.text)
        scanTriggers = scanTriggersTextBox.text
        friendsList = friendsListTextBox.text
        doNotHeal = noHealTextBox.text
        echo '-=[ Settings Saved'
        window_action = :save
      end
    end
    window.signal_connect('delete_event') { window_action = :cancel }
    window.show_all
  end

  before_dying { Gtk.queue { window.destroy } }
  wait_while { window_action.nil? }
  undo_before_dying
  Gtk.queue { window.destroy }

  Settings[Char.name]['shatteredMode'] = shatteredMode
  Settings[Char.name]['cureBlood'] = cureBlood
  Settings[Char.name]['headAndNerves'] = headAndNerves
  Settings[Char.name]['stopWhenFried'] = stopWhenFried
  Settings[Char.name]['wounds_1'] = wounds_1
  Settings[Char.name]['wounds_2'] = wounds_2
  Settings[Char.name]['wounds_3'] = wounds_3
  Settings[Char.name]['scars_1'] = scars_1
  Settings[Char.name]['scars_2'] = scars_2
  Settings[Char.name]['scars_3'] = scars_3
  Settings[Char.name]['friendsList'] = friendsList
  Settings[Char.name]['doNotHeal'] = doNotHeal
  Settings[Char.name]['scanTimer'] = scanTimer
  Settings[Char.name]['scanTriggers'] = scanTriggers
  Settings.save
end

echo '-[ Room Scan Started'
echo "-[ You may want to ignore: '>appraise'"
echo "-[ You may want to ignore: 'You take a quick appraisal of'"
loop do
  matchtimeout scanTimer, scanTriggers.split(',')

  checkpcs.each do |player|
    break if stopWhenFried and checkfried
    next if doNotHeal.include?(player)
    if shatteredMode or friendsList.include?(player)
      TransferFrom(player, cureBlood, stopWhenFried)
    end
    DoHealdown(wounds_1, wounds_2, wounds_3, false, false, false)
  end

  DoHealdown(wounds_1, wounds_2, wounds_3, scars_1, scars_2, scars_3)

  CheckHeadAndNerves() if headAndNerves
end
