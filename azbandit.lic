=begin
This script will walk around looking for bandits until all group members have finished their bandit bounties.

It is untested outside of Kraken Falls, but should work anywhere.

It will work better if followers allow the leader to see their bounty via lichnet, e.g. ;lnet allow bounty all

# Name: azbandit
# Author: Azanoth
# Categories: Bounties
# Tags: bandit, bandits, bounty
# Version: 0.1
=end

status_tags 'on'
fput 'flag groupmovement on'
fput 'flag description on'

module AzBandit
  # user configurable (AKA STUFF YOU MIGHT ACTUALLY CARE ABOUT)
  @CAST_DISABLERS = true
  @CAST_DISABLERS_REPEATEDLY = true
  @DISABLER_MIN_MANA = 25
  @LOOTING_ENABLED = true # faster but you get less control over what gets looted

  # static variables
  @PROGRESS_UPDATE_INTERVAL = 1
  @DEBUG = false
  @BANDIT_BOUNTY = /^You have been tasked to (?:help \w+ )?suppress bandit activity (?:in|on|near|between|under) (?:the )?(.*?)\s(?:near|between|under|\.)/
  @BAD_LOCATIONS = /the town of Kharam-Dzu/
  @MY_CHARS_HACK = defined?(AzConfig::CHARS) ? AzConfig::CHARS : []

  # dynamic variables
  @poofed_bandits = []
  @grouplist = []
  @groupset = {}
  @bounty_text = ''
  @bounty_location = ''
  @last_progress_update = nil
  @last_progress_msg = ''
  @step2_ways = {}
  @start_time = Time.now.to_f

  def self.main()
    if @LOOTING_ENABLED && !GameObj.inv.find { |x| x.noun == Vars.lootsack }
      raise "Failed to find lootsack (#{Vars.lootsack})"
    end

    # Setup
    @grouplist, @groupset = populate_group
    echo "Group is #{@grouplist.length ? @grouplist.join(', ') : 'empty'}"
    @bounty_text, @bounty_location = find_bounty_text
    exit_azbandit if all_done?
    echo "Bounty location is #{@bounty_location}"

    # Go to bounty area
    rooms_list = populate_rooms_list
    if !rooms_list.include? Room.current.id
      Script.run('go2', "#{rooms_list[0]}")
      sleep 0.5
      raise 'Failed to get to bounty area' if Room.current.id != rooms_list[0]
    end

    # Main loop
    echo 'Handling remaining rooms' if @DEBUG
    prev_room = nil
    prev_room_owned = nil
    wait_for_battle_timeout = false # every once in awhile a dialog_data bandit gets stuck
    loop do
      # Wait for battle?
      wait_for_battle_timeout = false
      while AzLib::RoomInfo.room_owned? && AzLib::Targets.bandits.length > 0
        wait_for_battle_timeout = wait_for_battle
      end

      # Done?
      exit_azbandit if all_done?

      # Identify next room
      # (we prefer previous room unless we were poaching or are poaching in this
      #  room, to avoid getting stuck in e.g. y1/x2 in a x1-y1-x2 layout where
      #  another group is in y1)
      next_room =
        if Room.current.id != prev_room && prev_room && prev_room_owned &&
             AzLib::RoomInfo.room_owned?
          prev_room
        else
          Room.current.find_nearest(rooms_list).to_i
        end

      if next_room == 0 || next_room.nil?
        rooms_list = populate_rooms_list
        next
      end

      # Step to next room
      if Room.current.id != next_room
        prev_room = Room.current.id
        prev_room_owned = AzLib::RoomInfo.room_owned?
        step_to_next_room next_room, wait_for_battle_timeout
      end
      rooms_list = rooms_list.select { |id| id != Room.current.id }

      # Retrieve stragglers?
      if @grouplist.any? do |char|
           !AzLib::RoomInfo.room_info.followers.any? { |f| f.noun == char }
         end
        retrieve_stragglers prev_room
      end
    end
  end

  def self.populate_rooms_list()
    $AZBANDIT_ROOM_CACHE = {} unless $AZBANDIT_ROOM_CACHE

    if !$AZBANDIT_ROOM_CACHE[@bounty_location]
      if @bounty_text =~ /Widowmaker's Road/
        $AZBANDIT_ROOM_CACHE[@bounty_location] = [
          29_021,
          29_022,
          29_023,
          29_024,
          29_025,
          29_026,
          29_027,
          29_028,
          29_029,
          29_030,
          29_050,
          29_051,
          29_053,
          29_054,
          29_055
        ]
      elsif @bounty_text =~ /Muddy Village/
        $AZBANDIT_ROOM_CACHE[@bounty_location] = [
          29_047,
          29_049,
          29_059,
          29_060,
          29_070,
          29_071,
          29_066,
          29_065
        ]
      elsif @bounty_text =~ /Cliffwalk/
        $AZBANDIT_ROOM_CACHE[@bounty_location] = [
          29_124,
          29_120,
          29_128,
          29_129,
          29_133,
          29_134,
          29_217,
          29_219,
          29_223,
          29_222
        ]
      elsif @bounty_text =~ /Black Weald/
        return [
          29_227,
          29_228,
          29_229,
          29_234,
          29_235,
          29_236,
          29_237,
          29_238,
          29_239,
          29_240,
          29_231,
          29_230
        ]
      else
        echo 'Loading bounty rooms...'
        $AZBANDIT_ROOM_CACHE[@bounty_location] =
          Room.list.find_all do |r|
            r.outside? && r.location =~ /#{@bounty_location}/i &&
              r.location !~ @BAD_LOCATIONS
          end.collect { |r| r.id }
        echo '...done!'
      end
    end
    return $AZBANDIT_ROOM_CACHE[@bounty_location]
  end

  def self.populate_group()
    status_tags 'off'
    grouplist = []
    groupset = {}
    fput 'group'
    while line = get
      if line =~
           /(\w+) is (?:following you|the leader of your group|also a member of your group)/i &&
           !$1.nil?
        grouplist.push($1)
        groupset[$1] = true
      elsif line =~
            /group status is currently|to set your group status|^.$|You are not currently in a group/m
        status_tags 'on'
        return grouplist, groupset
      end
    end
  end

  def self.find_bounty_text()
    bounty_text =
      [bounty?, *@grouplist.map { |n| LNet.get_data(n, 'bounty') }].find do |b|
        b =~ @BANDIT_BOUNTY
      end
    if !bounty_text
      raise 'Unable to find bandit bounty on you or group! Exiting'
    end
    return bounty_text, $1
  end

  def self.game_obj_bandits()
    return [] if GameObj.npcs.nil?
    return(
      GameObj.npcs.select do |npc|
        !npc.name.start_with?('animated ') &&
          (
            npc.type =~ /bandit/ ||
              AzLib::Bandits::TARGET_SET.include?(npc.noun)
          )
      end
    )
  end

  def self.room_needs_looting?()
    echo 'room_needs_looting?' if @DEBUG
    return(
      game_obj_bandits.any? { |n| n.status == 'dead' } || GameObj.loot
        .any? do |n|
        #  n.type == "skin" ||
        n.type == 'gem' || n.name =~ /coins/
      end
    )
  end

  def self.step_to_next_room(room_id, force_movement)
    # Step towards next room
    start_room_id = Room.current.id

    while Room.current.id == start_room_id
      # Return if we no longer need to move
      if AzLib::RoomInfo.room_owned? && AzLib::Targets.bandits.length > 0 &&
           !force_movement
        return
      end

      # Move
      fput 'stand' until standing?
      waitrt?
      GameObj.pcs.each do |pc|
        if @groupset[pc.noun] &&
             pc.status =~ /kneeling|sitting|lying down|prone/
          put "pull #{pc.noun}"
        end
      end
      step_helper room_id
    end
  end

  # adapted from step2.lic
  def self.step_helper(destination_room)
    echo "step_helper #{Room.current.id}->#{destination_room}" if @DEBUG
    start_room = Room.current.id

    unless Room.current.id
      raise 'current room was not found in the map database'
    end
    unless destination_room
      raise 'destination room was not found in the map database'
    end
    if start_room == destination_room
      echo 'WARNING: start room and destination room are the same'
      return
    end

    # Identify movement
    key = "#{start_room}->#{destination_room}"
    unless @step2_ways[key]
      previous, shortest_distances =
        Map.dijkstra(Room.current.id, destination_room)
      if !previous[destination_room]
        raise "dijkstra failed for #{start_room}->#{destination_room}"
      end
      path = [destination_room]
      path.push(previous[path[-1]]) until previous[path[-1]].nil?
      path.reverse!
      @step2_ways[key] =
        Room.current.wayto[path[path.index(start_room) + 1].to_s]
    end

    # Put move and wait for room change
    way = @step2_ways[key]
    fput 'stand' until standing?
    if way.class == String
      put way
    elsif way.class == Proc
      # this never comes up in bandits, and complicates wait_for_room_change
      raise 'Unhandled way.class == Proc'
      # way.call
    else
      raise 'error in the map database'
    end
    room_info = AzLib::RoomInfo.wait_for_room_change
    if !room_info
      echo 'WARNING: step2 timed out. Statuses:'
      echo GameObj.pcs.reject { |x|
             x.status.nil? || x.status == ''
           }.collect { |x| "#{x.noun}: #{x.status}" }.join(', ') # TODO remove me
      exit_azbandit if all_done?
    end
  end

  def self.retrieve_stragglers(prev_room_id)
    echo 'WARNING: Retrieving stragglers'
    stragglers = identify_stragglers
    while stragglers.length > 0
      put 'look'
      sleep 0.5 # try again in a second - this thing is fiddly
      fput "whisper ooc group We left behind #{stragglers.join(' and ')}"
      step_helper prev_room_id
      waitrt?
      stragglers.each { |char| fput "hold #{char}" }
      fput 'look'
      stragglers = identify_stragglers
      sleep 3 # if they're stunned, give other chars time to unstun them
    end
  end

  def self.identify_stragglers()
    pc_set = {}
    GameObj.pcs.each { |pc| pc_set[pc.noun] = true }
    return @grouplist.select { |name| !pc_set[name] }
  end

  def self.wait_for_battle()
    echo 'Bandits are here and we own the room'

    disabler_cast_count = 0
    disabler_cd_time = Time.now.to_i
    start_time = Time.now.to_i
    timeout_time = 2 # seconds
    lootsack = nil
    i = -1

    loop do
      if checkrt > 0
        waitrt?
      else
        sleep 0.25 # yield
      end

      if !AzLib::RoomInfo.room_owned?
        echo "ERROR: How did we get here if we don't own the room?"
        return true
      end
      i = i + 1
      fput 'stand' until standing?

      # cast disabler?
      disablers_enabled =
        if disabler_cast_count == 0
          (@CAST_DISABLERS && @CAST_DISABLERS_REPEATEDLY)
        else
          @CAST_DISABLERS
        end
      can_cast =
        checkrt == 0 && checkcastrt == 0 && checkmana >= @DISABLER_MIN_MANA
      bandits_need_disabling =
        AzLib::Targets.bandits.any? { |x| x.status.nil? || x.status == 'gone' }

      cast_disabler = disablers_enabled && can_cast && bandits_need_disabling
      # if cast_disabler
      #   if Char.prof == 'Wizard' && Spell[410].known?
      #     multifput 'prep 410', 'cast'
      #   elsif Char.prof == 'Sorcerer' && Spell[709].known?
      #     Spell[709].cast
      #   end
      #   next # restart wait_for_battle loop
      # end

      # check if room needs to be looted
      if room_needs_looting?
        echo 'room_needs_looting'
        if !@LOOTING_ENABLED
          echo 'Waiting for looting' if i % 10 == 0
          next # restart wait_for_battle loop
        end
        waitrt?

        # search bodies
        bodies = game_obj_bandits.select { |npc| npc.status == 'dead' }
        bodies.each_with_index { |bandit| fput "loot ##{bandit.id}" }

        # loot
        stored = false
        if !GameObj.left_hand.noun.nil? && !GameObj.right_hand.noun.nil?
          stored = true
          fput 'store left'
        end

        GameObj.loot.each do |x|
          if x.type == 'gem'
            if lootsack.nil?
              lootsack = GameObj.inv.find { |x| x.noun == Vars.lootsack }
              if !lootsack
                echo "WARNING: Failed to find lootsack (#{Vars.lootsack})"
                fput 'inv'
                sleep 1
                next # next item
              end
            end
            fput "_drag ##{x.id} ##{lootsack.id}"
          elsif x.name =~ /coins/
            fput 'get coins'
          end
        end

        fput 'gird' if stored
        next # restart wait_for_battle loop
      end

      # all done?
      return if AzLib::Targets.bandits.length == 0
      if (
           game_obj_bandits.length == 0 &&
             Time.now.to_i > (start_time + timeout_time)
         )
        AzLib::Targets.bandits.each { |x| AzLib::Targets.mark_npc_poofed x }
        echo 'wait_for_battle timed out'
        return true
      end

      # if we're here, it means bandits are still alive
      if i % 10 == 0
        echo 'Waiting for targets to be killed'
        fput 'look'
      end
    end
  end

  def self.exit_azbandit()
    echo "Azbandit Running Time: #{Time.now.to_f - @start_time}"
    Script.start 'fbandit'
    exit
  end

  def self.all_done?()
    echo 'Checking if done' if @DEBUG
    counts = []
    shared_counts = AzLib::Remote::RAW['bandits'].get_counts

    [Char.name, *@grouplist].each do |name|
      raise "Unable to find bounty count - #{name}" if !shared_counts[name]
      next if AzConfig.has_tag? :LOW_BOUNTY_PRIORITY, name
      counts.push shared_counts[name]
    end

    all_done = counts.all? { |count| count == 0 }
    give_progress_update =
      all_done || @last_progress_update.nil? ||
        @last_progress_update < Time.now.to_f - @PROGRESS_UPDATE_INTERVAL
    msg = shared_counts.map { |char, status| "#{char} #{status}" }.join('. ')

    if give_progress_update && msg != @last_progress_msg
      fput "whisper ooc group Status - #{msg} (#{(Time.now.to_f - @start_time).to_i})"
      @last_progress_update = Time.now.to_f
      @last_progress_msg = msg
    end

    return false if !all_done
    fput "whisper ooc group Everyone is done! (#{(Time.now.to_f - @start_time).to_i})"
    return true
  end
end

AzBandit.main
